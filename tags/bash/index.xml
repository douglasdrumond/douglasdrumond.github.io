<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>bash on Douglas Drumond Kayama</title><link>https://www.douglasdrumond.tech/tags/bash/</link><description>Recent content in bash on Douglas Drumond Kayama</description><generator>Hugo -- gohugo.io</generator><language>en-GB</language><lastBuildDate>Tue, 06 Nov 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://www.douglasdrumond.tech/tags/bash/index.xml" rel="self" type="application/rss+xml"/><item><title>Replacing in bash without sed</title><link>https://www.douglasdrumond.tech/post/2012-11-06-bash-replace-without-sed/</link><pubDate>Tue, 06 Nov 2012 00:00:00 +0000</pubDate><guid>https://www.douglasdrumond.tech/post/2012-11-06-bash-replace-without-sed/</guid><description>Bash has built-in substitution. For simple tasks itâ€™s easier than piping through sed:
text=&amp;#34;hello world&amp;#34; echo ${text/hello/ohayou} # prints ohayou world Be aware that just the first word is changed:
text=&amp;#34;hello world hello&amp;#34; echo ${text/hello/ohayou} # prints ohayou world hello To change all instances of a world, prepend the search pattern with another slash:
text=&amp;#34;hello world hello&amp;#34; echo ${text//hello/ohayou} # prints ohayou world ohayou Notice there are two slashes before hello, one as the separator and one prepending it.</description></item></channel></rss>